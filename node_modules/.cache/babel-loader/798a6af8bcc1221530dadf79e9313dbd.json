{"ast":null,"code":"import _toConsumableArray from\"/Users/aawferris/Local_Repos/BlackwaterChat/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/aawferris/Local_Repos/BlackwaterChat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useContext,useState,useEffect}from'react';import CallObjectContext from'../../CallObjectContext';import'./Chat.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Chat(props){var callObject=useContext(CallObjectContext);var _useState=useState(''),_useState2=_slicedToArray(_useState,2),inputValue=_useState2[0],setInputValue=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),chatHistory=_useState4[0],setChatHistory=_useState4[1];var handleChange=function handleChange(event){setInputValue(event.target.value);};function handleSubmit(event){event.preventDefault();callObject.sendAppMessage({message:inputValue},'*');var name=callObject.participants().local.user_name?callObject.participants().local.user_name:'Guest';setChatHistory([].concat(_toConsumableArray(chatHistory),[{sender:name,message:inputValue}]));setInputValue('');}/**\n   * Update chat state based on a message received to all participants.\n   *\n   */useEffect(function(){if(!callObject){return;}function handleAppMessage(event){var participants=callObject.participants();var name=participants[event.fromId].user_name?participants[event.fromId].user_name:'Guest';setChatHistory([].concat(_toConsumableArray(chatHistory),[{sender:name,message:event.data.message}]));// Make other icons light up\nprops.notification();}callObject.on('app-message',handleAppMessage);return function cleanup(){callObject.off('app-message',handleAppMessage);};},[callObject,chatHistory]);useEffect(function(){},[chatHistory]);return props.onClickDisplay?/*#__PURE__*/_jsxs(\"div\",{className:\"chat\",children:[chatHistory.map(function(entry,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"messageList\",children:[/*#__PURE__*/_jsx(\"b\",{children:entry.sender}),\": \",entry.message]},\"entry-\".concat(index));}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"chatInput\"}),/*#__PURE__*/_jsx(\"input\",{id:\"chatInput\",className:\"chat-input\",type:\"text\",placeholder:\"Type your message here..\",value:inputValue,onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"send-chat-button\",children:\"Send\"})]})]}):null;}","map":{"version":3,"sources":["/Users/aawferris/Local_Repos/BlackwaterChat/src/components/Chat/Chat.js"],"names":["React","useContext","useState","useEffect","CallObjectContext","Chat","props","callObject","inputValue","setInputValue","chatHistory","setChatHistory","handleChange","event","target","value","handleSubmit","preventDefault","sendAppMessage","message","name","participants","local","user_name","sender","handleAppMessage","fromId","data","notification","on","cleanup","off","onClickDisplay","map","entry","index"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({ message: inputValue }, '*');\n    const name = callObject.participants().local.user_name\n      ? callObject.participants().local.user_name\n      : 'Guest';\n    setChatHistory([\n      ...chatHistory,\n      {\n        sender: name,\n        message: inputValue,\n      },\n    ]);\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name\n        ? participants[event.fromId].user_name\n        : 'Guest';\n      setChatHistory([\n        ...chatHistory,\n        {\n          sender: name,\n          message: event.data.message,\n        },\n      ]);\n      // Make other icons light up\n      props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  return props.onClickDisplay ? (\n    <div className=\"chat\">\n      {chatHistory.map((entry, index) => (\n        <div key={`entry-${index}`} className=\"messageList\">\n          <b>{entry.sender}</b>: {entry.message}\n        </div>\n      ))}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}