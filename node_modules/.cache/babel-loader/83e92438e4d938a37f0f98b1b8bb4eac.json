{"ast":null,"code":"var _jsxFileName = \"/Users/aawferris/Local_Repos/call-object-react/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat(props) {\n  _s();\n\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({\n      message: inputValue\n    }, '*');\n    const name = callObject.participants().local.user_name ? callObject.participants().local.user_name : 'Guest';\n    setChatHistory([...chatHistory, {\n      sender: name,\n      message: inputValue\n    }]);\n    setInputValue('');\n  }\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name ? participants[event.fromId].user_name : 'Guest';\n      setChatHistory([...chatHistory, {\n        sender: name,\n        message: event.data.message\n      }]); // Make other icons light up\n\n      props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n  useEffect(() => {}, [chatHistory]);\n  return props.onClickDisplay ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageList\",\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: entry.sender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), \": \", entry.message]\n    }, `entry-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"chatInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"chatInput\",\n        className: \"chat-input\",\n        type: \"text\",\n        placeholder: \"Type your message here..\",\n        value: inputValue,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-chat-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this) : null;\n}\n\n_s(Chat, \"MMVR41DeOJyPn1ZAFp4aBTHLWXA=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/aawferris/Local_Repos/call-object-react/src/components/Chat/Chat.js"],"names":["React","useContext","useState","useEffect","CallObjectContext","Chat","props","callObject","inputValue","setInputValue","chatHistory","setChatHistory","handleChange","event","target","value","handleSubmit","preventDefault","sendAppMessage","message","name","participants","local","user_name","sender","handleAppMessage","fromId","data","notification","on","cleanup","off","onClickDisplay","map","entry","index"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({ message: inputValue }, '*');\n    const name = callObject.participants().local.user_name\n      ? callObject.participants().local.user_name\n      : 'Guest';\n    setChatHistory([\n      ...chatHistory,\n      {\n        sender: name,\n        message: inputValue,\n      },\n    ]);\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name\n        ? participants[event.fromId].user_name\n        : 'Guest';\n      setChatHistory([\n        ...chatHistory,\n        {\n          sender: name,\n          message: event.data.message,\n        },\n      ]);\n      // Make other icons light up\n      props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  return props.onClickDisplay ? (\n    <div className=\"chat\">\n      {chatHistory.map((entry, index) => (\n        <div key={`entry-${index}`} className=\"messageList\">\n          <b>{entry.sender}</b>: {entry.message}\n        </div>\n      ))}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}